// Generated from LuaLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


import LuaLexerBase from './LuaLexerBase.js';

const serializedATN = [4,0,69,618,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
2,78,7,78,2,79,7,79,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,
13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,
36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,
48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,
1,54,1,54,1,55,1,55,1,55,1,56,1,56,5,56,362,8,56,10,56,12,56,365,9,56,1,
57,1,57,1,57,5,57,370,8,57,10,57,12,57,373,9,57,1,57,1,57,1,58,1,58,1,58,
5,58,380,8,58,10,58,12,58,383,9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,
60,1,60,1,60,1,60,1,60,5,60,397,8,60,10,60,12,60,400,9,60,1,60,3,60,403,
8,60,1,61,4,61,406,8,61,11,61,12,61,407,1,62,1,62,1,62,4,62,413,8,62,11,
62,12,62,414,1,63,4,63,418,8,63,11,63,12,63,419,1,63,1,63,5,63,424,8,63,
10,63,12,63,427,9,63,1,63,3,63,430,8,63,1,63,1,63,4,63,434,8,63,11,63,12,
63,435,1,63,3,63,439,8,63,1,63,4,63,442,8,63,11,63,12,63,443,1,63,1,63,3,
63,448,8,63,1,64,1,64,1,64,4,64,453,8,64,11,64,12,64,454,1,64,1,64,5,64,
459,8,64,10,64,12,64,462,9,64,1,64,3,64,465,8,64,1,64,1,64,1,64,1,64,4,64,
471,8,64,11,64,12,64,472,1,64,3,64,476,8,64,1,64,1,64,1,64,4,64,481,8,64,
11,64,12,64,482,1,64,1,64,3,64,487,8,64,1,65,1,65,3,65,491,8,65,1,65,4,65,
494,8,65,11,65,12,65,495,1,66,1,66,3,66,500,8,66,1,66,4,66,503,8,66,11,66,
12,66,504,1,67,1,67,1,67,1,67,3,67,511,8,67,1,67,1,67,1,67,1,67,3,67,517,
8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,530,8,68,
1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,4,70,542,8,70,11,70,12,
70,543,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,5,74,
558,8,74,10,74,12,74,561,9,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,
75,1,76,1,76,5,76,574,8,76,10,76,12,76,577,9,76,1,76,1,76,5,76,581,8,76,
10,76,12,76,584,9,76,1,76,1,76,5,76,588,8,76,10,76,12,76,591,9,76,1,76,1,
76,1,77,4,77,596,8,77,11,77,12,77,597,1,77,1,77,1,78,1,78,1,78,1,78,1,79,
1,79,1,79,3,79,609,8,79,1,79,5,79,612,8,79,10,79,12,79,615,9,79,1,79,1,79,
2,398,582,0,80,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
59,119,60,121,0,123,61,125,62,127,63,129,64,131,0,133,0,135,0,137,0,139,
0,141,0,143,0,145,0,147,0,149,65,151,66,153,0,155,67,157,68,159,69,1,0,15,
3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,2,0,
39,39,92,92,2,0,88,88,120,120,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,
112,112,11,0,34,36,39,39,92,92,97,98,102,102,110,110,114,114,116,116,118,
118,122,122,124,124,1,0,48,50,1,0,48,57,3,0,48,57,65,70,97,102,4,0,10,10,
13,13,133,133,8232,8233,2,0,10,10,13,13,3,0,9,9,12,13,32,32,650,0,1,1,0,
0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,123,1,0,0,0,0,125,1,
0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,155,1,0,
0,0,0,157,1,0,0,0,0,159,1,0,0,0,1,161,1,0,0,0,3,163,1,0,0,0,5,165,1,0,0,
0,7,171,1,0,0,0,9,176,1,0,0,0,11,179,1,0,0,0,13,183,1,0,0,0,15,189,1,0,0,
0,17,196,1,0,0,0,19,202,1,0,0,0,21,205,1,0,0,0,23,210,1,0,0,0,25,217,1,0,
0,0,27,222,1,0,0,0,29,226,1,0,0,0,31,228,1,0,0,0,33,231,1,0,0,0,35,240,1,
0,0,0,37,246,1,0,0,0,39,248,1,0,0,0,41,250,1,0,0,0,43,257,1,0,0,0,45,266,
1,0,0,0,47,269,1,0,0,0,49,273,1,0,0,0,51,279,1,0,0,0,53,284,1,0,0,0,55,286,
1,0,0,0,57,288,1,0,0,0,59,290,1,0,0,0,61,292,1,0,0,0,63,294,1,0,0,0,65,296,
1,0,0,0,67,300,1,0,0,0,69,303,1,0,0,0,71,306,1,0,0,0,73,308,1,0,0,0,75,311,
1,0,0,0,77,313,1,0,0,0,79,315,1,0,0,0,81,318,1,0,0,0,83,321,1,0,0,0,85,325,
1,0,0,0,87,328,1,0,0,0,89,330,1,0,0,0,91,332,1,0,0,0,93,334,1,0,0,0,95,336,
1,0,0,0,97,338,1,0,0,0,99,340,1,0,0,0,101,343,1,0,0,0,103,346,1,0,0,0,105,
348,1,0,0,0,107,350,1,0,0,0,109,352,1,0,0,0,111,356,1,0,0,0,113,359,1,0,
0,0,115,366,1,0,0,0,117,376,1,0,0,0,119,386,1,0,0,0,121,402,1,0,0,0,123,
405,1,0,0,0,125,409,1,0,0,0,127,447,1,0,0,0,129,486,1,0,0,0,131,488,1,0,
0,0,133,497,1,0,0,0,135,516,1,0,0,0,137,529,1,0,0,0,139,531,1,0,0,0,141,
536,1,0,0,0,143,547,1,0,0,0,145,549,1,0,0,0,147,551,1,0,0,0,149,553,1,0,
0,0,151,564,1,0,0,0,153,571,1,0,0,0,155,595,1,0,0,0,157,601,1,0,0,0,159,
605,1,0,0,0,161,162,5,59,0,0,162,2,1,0,0,0,163,164,5,61,0,0,164,4,1,0,0,
0,165,166,5,98,0,0,166,167,5,114,0,0,167,168,5,101,0,0,168,169,5,97,0,0,
169,170,5,107,0,0,170,6,1,0,0,0,171,172,5,103,0,0,172,173,5,111,0,0,173,
174,5,116,0,0,174,175,5,111,0,0,175,8,1,0,0,0,176,177,5,100,0,0,177,178,
5,111,0,0,178,10,1,0,0,0,179,180,5,101,0,0,180,181,5,110,0,0,181,182,5,100,
0,0,182,12,1,0,0,0,183,184,5,119,0,0,184,185,5,104,0,0,185,186,5,105,0,0,
186,187,5,108,0,0,187,188,5,101,0,0,188,14,1,0,0,0,189,190,5,114,0,0,190,
191,5,101,0,0,191,192,5,112,0,0,192,193,5,101,0,0,193,194,5,97,0,0,194,195,
5,116,0,0,195,16,1,0,0,0,196,197,5,117,0,0,197,198,5,110,0,0,198,199,5,116,
0,0,199,200,5,105,0,0,200,201,5,108,0,0,201,18,1,0,0,0,202,203,5,105,0,0,
203,204,5,102,0,0,204,20,1,0,0,0,205,206,5,116,0,0,206,207,5,104,0,0,207,
208,5,101,0,0,208,209,5,110,0,0,209,22,1,0,0,0,210,211,5,101,0,0,211,212,
5,108,0,0,212,213,5,115,0,0,213,214,5,101,0,0,214,215,5,105,0,0,215,216,
5,102,0,0,216,24,1,0,0,0,217,218,5,101,0,0,218,219,5,108,0,0,219,220,5,115,
0,0,220,221,5,101,0,0,221,26,1,0,0,0,222,223,5,102,0,0,223,224,5,111,0,0,
224,225,5,114,0,0,225,28,1,0,0,0,226,227,5,44,0,0,227,30,1,0,0,0,228,229,
5,105,0,0,229,230,5,110,0,0,230,32,1,0,0,0,231,232,5,102,0,0,232,233,5,117,
0,0,233,234,5,110,0,0,234,235,5,99,0,0,235,236,5,116,0,0,236,237,5,105,0,
0,237,238,5,111,0,0,238,239,5,110,0,0,239,34,1,0,0,0,240,241,5,108,0,0,241,
242,5,111,0,0,242,243,5,99,0,0,243,244,5,97,0,0,244,245,5,108,0,0,245,36,
1,0,0,0,246,247,5,60,0,0,247,38,1,0,0,0,248,249,5,62,0,0,249,40,1,0,0,0,
250,251,5,114,0,0,251,252,5,101,0,0,252,253,5,116,0,0,253,254,5,117,0,0,
254,255,5,114,0,0,255,256,5,110,0,0,256,42,1,0,0,0,257,258,5,99,0,0,258,
259,5,111,0,0,259,260,5,110,0,0,260,261,5,116,0,0,261,262,5,105,0,0,262,
263,5,110,0,0,263,264,5,117,0,0,264,265,5,101,0,0,265,44,1,0,0,0,266,267,
5,58,0,0,267,268,5,58,0,0,268,46,1,0,0,0,269,270,5,110,0,0,270,271,5,105,
0,0,271,272,5,108,0,0,272,48,1,0,0,0,273,274,5,102,0,0,274,275,5,97,0,0,
275,276,5,108,0,0,276,277,5,115,0,0,277,278,5,101,0,0,278,50,1,0,0,0,279,
280,5,116,0,0,280,281,5,114,0,0,281,282,5,117,0,0,282,283,5,101,0,0,283,
52,1,0,0,0,284,285,5,46,0,0,285,54,1,0,0,0,286,287,5,126,0,0,287,56,1,0,
0,0,288,289,5,45,0,0,289,58,1,0,0,0,290,291,5,35,0,0,291,60,1,0,0,0,292,
293,5,40,0,0,293,62,1,0,0,0,294,295,5,41,0,0,295,64,1,0,0,0,296,297,5,110,
0,0,297,298,5,111,0,0,298,299,5,116,0,0,299,66,1,0,0,0,300,301,5,60,0,0,
301,302,5,60,0,0,302,68,1,0,0,0,303,304,5,62,0,0,304,305,5,62,0,0,305,70,
1,0,0,0,306,307,5,38,0,0,307,72,1,0,0,0,308,309,5,47,0,0,309,310,5,47,0,
0,310,74,1,0,0,0,311,312,5,37,0,0,312,76,1,0,0,0,313,314,5,58,0,0,314,78,
1,0,0,0,315,316,5,60,0,0,316,317,5,61,0,0,317,80,1,0,0,0,318,319,5,62,0,
0,319,320,5,61,0,0,320,82,1,0,0,0,321,322,5,97,0,0,322,323,5,110,0,0,323,
324,5,100,0,0,324,84,1,0,0,0,325,326,5,111,0,0,326,327,5,114,0,0,327,86,
1,0,0,0,328,329,5,43,0,0,329,88,1,0,0,0,330,331,5,42,0,0,331,90,1,0,0,0,
332,333,5,123,0,0,333,92,1,0,0,0,334,335,5,125,0,0,335,94,1,0,0,0,336,337,
5,91,0,0,337,96,1,0,0,0,338,339,5,93,0,0,339,98,1,0,0,0,340,341,5,61,0,0,
341,342,5,61,0,0,342,100,1,0,0,0,343,344,5,46,0,0,344,345,5,46,0,0,345,102,
1,0,0,0,346,347,5,124,0,0,347,104,1,0,0,0,348,349,5,94,0,0,349,106,1,0,0,
0,350,351,5,47,0,0,351,108,1,0,0,0,352,353,5,46,0,0,353,354,5,46,0,0,354,
355,5,46,0,0,355,110,1,0,0,0,356,357,5,126,0,0,357,358,5,61,0,0,358,112,
1,0,0,0,359,363,7,0,0,0,360,362,7,1,0,0,361,360,1,0,0,0,362,365,1,0,0,0,
363,361,1,0,0,0,363,364,1,0,0,0,364,114,1,0,0,0,365,363,1,0,0,0,366,371,
5,34,0,0,367,370,3,135,67,0,368,370,8,2,0,0,369,367,1,0,0,0,369,368,1,0,
0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,
371,1,0,0,0,374,375,5,34,0,0,375,116,1,0,0,0,376,381,5,39,0,0,377,380,3,
135,67,0,378,380,8,3,0,0,379,377,1,0,0,0,379,378,1,0,0,0,380,383,1,0,0,0,
381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,385,
5,39,0,0,385,118,1,0,0,0,386,387,5,91,0,0,387,388,3,121,60,0,388,389,5,93,
0,0,389,120,1,0,0,0,390,391,5,61,0,0,391,392,3,121,60,0,392,393,5,61,0,0,
393,403,1,0,0,0,394,398,5,91,0,0,395,397,9,0,0,0,396,395,1,0,0,0,397,400,
1,0,0,0,398,399,1,0,0,0,398,396,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,
401,403,5,93,0,0,402,390,1,0,0,0,402,394,1,0,0,0,403,122,1,0,0,0,404,406,
3,143,71,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,
0,408,124,1,0,0,0,409,410,5,48,0,0,410,412,7,4,0,0,411,413,3,145,72,0,412,
411,1,0,0,0,413,414,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,126,1,0,
0,0,416,418,3,143,71,0,417,416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,0,0,419,
420,1,0,0,0,420,421,1,0,0,0,421,425,5,46,0,0,422,424,3,143,71,0,423,422,
1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,429,1,0,0,0,
427,425,1,0,0,0,428,430,3,131,65,0,429,428,1,0,0,0,429,430,1,0,0,0,430,448,
1,0,0,0,431,433,5,46,0,0,432,434,3,143,71,0,433,432,1,0,0,0,434,435,1,0,
0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,439,3,131,65,0,438,
437,1,0,0,0,438,439,1,0,0,0,439,448,1,0,0,0,440,442,3,143,71,0,441,440,1,
0,0,0,442,443,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,
446,3,131,65,0,446,448,1,0,0,0,447,417,1,0,0,0,447,431,1,0,0,0,447,441,1,
0,0,0,448,128,1,0,0,0,449,450,5,48,0,0,450,452,7,4,0,0,451,453,3,145,72,
0,452,451,1,0,0,0,453,454,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,456,
1,0,0,0,456,460,5,46,0,0,457,459,3,145,72,0,458,457,1,0,0,0,459,462,1,0,
0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,463,
465,3,133,66,0,464,463,1,0,0,0,464,465,1,0,0,0,465,487,1,0,0,0,466,467,5,
48,0,0,467,468,7,4,0,0,468,470,5,46,0,0,469,471,3,145,72,0,470,469,1,0,0,
0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,476,
3,133,66,0,475,474,1,0,0,0,475,476,1,0,0,0,476,487,1,0,0,0,477,478,5,48,
0,0,478,480,7,4,0,0,479,481,3,145,72,0,480,479,1,0,0,0,481,482,1,0,0,0,482,
480,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,3,133,66,0,485,487,1,
0,0,0,486,449,1,0,0,0,486,466,1,0,0,0,486,477,1,0,0,0,487,130,1,0,0,0,488,
490,7,5,0,0,489,491,7,6,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,493,1,0,
0,0,492,494,3,143,71,0,493,492,1,0,0,0,494,495,1,0,0,0,495,493,1,0,0,0,495,
496,1,0,0,0,496,132,1,0,0,0,497,499,7,7,0,0,498,500,7,6,0,0,499,498,1,0,
0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,503,3,143,71,0,502,501,1,0,0,0,503,
504,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,134,1,0,0,0,506,507,5,92,
0,0,507,517,7,8,0,0,508,510,5,92,0,0,509,511,5,13,0,0,510,509,1,0,0,0,510,
511,1,0,0,0,511,512,1,0,0,0,512,517,5,10,0,0,513,517,3,137,68,0,514,517,
3,139,69,0,515,517,3,141,70,0,516,506,1,0,0,0,516,508,1,0,0,0,516,513,1,
0,0,0,516,514,1,0,0,0,516,515,1,0,0,0,517,136,1,0,0,0,518,519,5,92,0,0,519,
530,3,143,71,0,520,521,5,92,0,0,521,522,3,143,71,0,522,523,3,143,71,0,523,
530,1,0,0,0,524,525,5,92,0,0,525,526,7,9,0,0,526,527,3,143,71,0,527,528,
3,143,71,0,528,530,1,0,0,0,529,518,1,0,0,0,529,520,1,0,0,0,529,524,1,0,0,
0,530,138,1,0,0,0,531,532,5,92,0,0,532,533,5,120,0,0,533,534,3,145,72,0,
534,535,3,145,72,0,535,140,1,0,0,0,536,537,5,92,0,0,537,538,5,117,0,0,538,
539,5,123,0,0,539,541,1,0,0,0,540,542,3,145,72,0,541,540,1,0,0,0,542,543,
1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,125,0,
0,546,142,1,0,0,0,547,548,7,10,0,0,548,144,1,0,0,0,549,550,7,11,0,0,550,
146,1,0,0,0,551,552,8,12,0,0,552,148,1,0,0,0,553,554,5,45,0,0,554,555,5,
45,0,0,555,559,1,0,0,0,556,558,8,13,0,0,557,556,1,0,0,0,558,561,1,0,0,0,
559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,563,
6,74,0,0,563,150,1,0,0,0,564,565,5,45,0,0,565,566,5,45,0,0,566,567,1,0,0,
0,567,568,3,153,76,0,568,569,1,0,0,0,569,570,6,75,0,0,570,152,1,0,0,0,571,
575,5,91,0,0,572,574,5,61,0,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,
0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,582,5,91,0,0,579,
581,9,0,0,0,580,579,1,0,0,0,581,584,1,0,0,0,582,583,1,0,0,0,582,580,1,0,
0,0,583,585,1,0,0,0,584,582,1,0,0,0,585,589,5,93,0,0,586,588,5,61,0,0,587,
586,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,592,1,0,
0,0,591,589,1,0,0,0,592,593,5,93,0,0,593,154,1,0,0,0,594,596,7,14,0,0,595,
594,1,0,0,0,596,597,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,599,1,0,
0,0,599,600,6,77,0,0,600,156,1,0,0,0,601,602,5,10,0,0,602,603,1,0,0,0,603,
604,6,78,0,0,604,158,1,0,0,0,605,606,5,35,0,0,606,608,4,79,0,0,607,609,5,
33,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,613,1,0,0,0,610,612,3,147,73,
0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,616,
1,0,0,0,615,613,1,0,0,0,616,617,6,79,1,0,617,160,1,0,0,0,39,0,363,369,371,
379,381,398,402,407,414,419,425,429,435,438,443,447,454,460,464,472,475,
482,486,490,495,499,504,510,516,529,543,559,575,582,589,597,608,613,2,6,
0,0,0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LuaLexer extends LuaLexerBase {

    static grammarFileName = "LuaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'break'", "'goto'", "'do'", 
                         "'end'", "'while'", "'repeat'", "'until'", "'if'", 
                         "'then'", "'elseif'", "'else'", "'for'", "','", 
                         "'in'", "'function'", "'local'", "'<'", "'>'", 
                         "'return'", "'continue'", "'::'", "'nil'", "'false'", 
                         "'true'", "'.'", "'~'", "'-'", "'#'", "'('", "')'", 
                         "'not'", "'<<'", "'>>'", "'&'", "'//'", "'%'", 
                         "':'", "'<='", "'>='", "'and'", "'or'", "'+'", 
                         "'*'", "'{'", "'}'", "'['", "']'", "'=='", "'..'", 
                         "'|'", "'^'", "'/'", "'...'", "'~='", null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, "'\\n'" ];
	static symbolicNames = [ null, "SEMI", "EQ", "BREAK", "GOTO", "DO", "END", 
                          "WHILE", "REPEAT", "UNTIL", "IF", "THEN", "ELSEIF", 
                          "ELSE", "FOR", "COMMA", "IN", "FUNCTION", "LOCAL", 
                          "LT", "GT", "RETURN", "CONTINUE", "CC", "NIL", 
                          "FALSE", "TRUE", "DOT", "SQUIG", "MINUS", "POUND", 
                          "OP", "CP", "NOT", "LL", "GG", "AMP", "SS", "PER", 
                          "COL", "LE", "GE", "AND", "OR", "PLUS", "STAR", 
                          "OCU", "CCU", "OB", "CB", "EE", "DD", "PIPE", 
                          "CARET", "SLASH", "DDD", "SQEQ", "NAME", "NORMALSTRING", 
                          "CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", 
                          "HEX_FLOAT", "LINE_COMMENT", "BLOCK_COMMENT", 
                          "WS", "NL", "SHEBANG" ];
	static ruleNames = [ "SEMI", "EQ", "BREAK", "GOTO", "DO", "END", "WHILE", 
                      "REPEAT", "UNTIL", "IF", "THEN", "ELSEIF", "ELSE", 
                      "FOR", "COMMA", "IN", "FUNCTION", "LOCAL", "LT", "GT", 
                      "RETURN", "CONTINUE", "CC", "NIL", "FALSE", "TRUE", 
                      "DOT", "SQUIG", "MINUS", "POUND", "OP", "CP", "NOT", 
                      "LL", "GG", "AMP", "SS", "PER", "COL", "LE", "GE", 
                      "AND", "OR", "PLUS", "STAR", "OCU", "CCU", "OB", "CB", 
                      "EE", "DD", "PIPE", "CARET", "SLASH", "DDD", "SQEQ", 
                      "NAME", "NORMALSTRING", "CHARSTRING", "LONGSTRING", 
                      "NESTED_STR", "INT", "HEX", "FLOAT", "HEX_FLOAT", 
                      "ExponentPart", "HexExponentPart", "EscapeSequence", 
                      "DecimalEscape", "HexEscape", "UtfEscape", "Digit", 
                      "HexDigit", "SingleLineInputCharacter", "LINE_COMMENT", 
                      "BLOCK_COMMENT", "LongBracketString", "WS", "NL", 
                      "SHEBANG" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

LuaLexer.EOF = antlr4.Token.EOF;
LuaLexer.SEMI = 1;
LuaLexer.EQ = 2;
LuaLexer.BREAK = 3;
LuaLexer.GOTO = 4;
LuaLexer.DO = 5;
LuaLexer.END = 6;
LuaLexer.WHILE = 7;
LuaLexer.REPEAT = 8;
LuaLexer.UNTIL = 9;
LuaLexer.IF = 10;
LuaLexer.THEN = 11;
LuaLexer.ELSEIF = 12;
LuaLexer.ELSE = 13;
LuaLexer.FOR = 14;
LuaLexer.COMMA = 15;
LuaLexer.IN = 16;
LuaLexer.FUNCTION = 17;
LuaLexer.LOCAL = 18;
LuaLexer.LT = 19;
LuaLexer.GT = 20;
LuaLexer.RETURN = 21;
LuaLexer.CONTINUE = 22;
LuaLexer.CC = 23;
LuaLexer.NIL = 24;
LuaLexer.FALSE = 25;
LuaLexer.TRUE = 26;
LuaLexer.DOT = 27;
LuaLexer.SQUIG = 28;
LuaLexer.MINUS = 29;
LuaLexer.POUND = 30;
LuaLexer.OP = 31;
LuaLexer.CP = 32;
LuaLexer.NOT = 33;
LuaLexer.LL = 34;
LuaLexer.GG = 35;
LuaLexer.AMP = 36;
LuaLexer.SS = 37;
LuaLexer.PER = 38;
LuaLexer.COL = 39;
LuaLexer.LE = 40;
LuaLexer.GE = 41;
LuaLexer.AND = 42;
LuaLexer.OR = 43;
LuaLexer.PLUS = 44;
LuaLexer.STAR = 45;
LuaLexer.OCU = 46;
LuaLexer.CCU = 47;
LuaLexer.OB = 48;
LuaLexer.CB = 49;
LuaLexer.EE = 50;
LuaLexer.DD = 51;
LuaLexer.PIPE = 52;
LuaLexer.CARET = 53;
LuaLexer.SLASH = 54;
LuaLexer.DDD = 55;
LuaLexer.SQEQ = 56;
LuaLexer.NAME = 57;
LuaLexer.NORMALSTRING = 58;
LuaLexer.CHARSTRING = 59;
LuaLexer.LONGSTRING = 60;
LuaLexer.INT = 61;
LuaLexer.HEX = 62;
LuaLexer.FLOAT = 63;
LuaLexer.HEX_FLOAT = 64;
LuaLexer.LINE_COMMENT = 65;
LuaLexer.BLOCK_COMMENT = 66;
LuaLexer.WS = 67;
LuaLexer.NL = 68;
LuaLexer.SHEBANG = 69;

LuaLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 79:
			return this.SHEBANG_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

LuaLexer.prototype.SHEBANG_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return  this.IsLine1Col0() ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};




